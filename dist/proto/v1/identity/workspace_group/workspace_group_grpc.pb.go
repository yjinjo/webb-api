// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.1
// source: proto/v1/identity/workspace_group/workspace_group.proto

package workspace_group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkspaceGroup_Create_FullMethodName            = "/proto.v1.identity.workspace_group.WorkspaceGroup/create"
	WorkspaceGroup_Update_FullMethodName            = "/proto.v1.identity.workspace_group.WorkspaceGroup/update"
	WorkspaceGroup_Delete_FullMethodName            = "/proto.v1.identity.workspace_group.WorkspaceGroup/delete"
	WorkspaceGroup_AddUsers_FullMethodName          = "/proto.v1.identity.workspace_group.WorkspaceGroup/add_users"
	WorkspaceGroup_RemoveUsers_FullMethodName       = "/proto.v1.identity.workspace_group.WorkspaceGroup/remove_users"
	WorkspaceGroup_UpdateRole_FullMethodName        = "/proto.v1.identity.workspace_group.WorkspaceGroup/update_role"
	WorkspaceGroup_Get_FullMethodName               = "/proto.v1.identity.workspace_group.WorkspaceGroup/get"
	WorkspaceGroup_List_FullMethodName              = "/proto.v1.identity.workspace_group.WorkspaceGroup/list"
	WorkspaceGroup_Stat_FullMethodName              = "/proto.v1.identity.workspace_group.WorkspaceGroup/stat"
	WorkspaceGroup_ListAPIGResources_FullMethodName = "/proto.v1.identity.workspace_group.WorkspaceGroup/ListAPIGResources"
)

// WorkspaceGroupClient is the client API for WorkspaceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceGroupClient interface {
	Create(ctx context.Context, in *CreateWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	Update(ctx context.Context, in *UpdateWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	Delete(ctx context.Context, in *WorkspaceGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddUsers(ctx context.Context, in *UsersWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	RemoveUsers(ctx context.Context, in *UsersWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	UpdateRole(ctx context.Context, in *WorkspaceGroupUpdateRoleRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	Get(ctx context.Context, in *WorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	List(ctx context.Context, in *WorkspaceGroupSearchQuery, opts ...grpc.CallOption) (*WorkspaceGroupsInfo, error)
	Stat(ctx context.Context, in *WorkspaceGroupStatQuery, opts ...grpc.CallOption) (*structpb.Struct, error)
	// API 리소스 목록을 반환하는 메서드 추가
	ListAPIGResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIResourcesList, error)
}

type workspaceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceGroupClient(cc grpc.ClientConnInterface) WorkspaceGroupClient {
	return &workspaceGroupClient{cc}
}

func (c *workspaceGroupClient) Create(ctx context.Context, in *CreateWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroup_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) Update(ctx context.Context, in *UpdateWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroup_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) Delete(ctx context.Context, in *WorkspaceGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkspaceGroup_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) AddUsers(ctx context.Context, in *UsersWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroup_AddUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) RemoveUsers(ctx context.Context, in *UsersWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroup_RemoveUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) UpdateRole(ctx context.Context, in *WorkspaceGroupUpdateRoleRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroup_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) Get(ctx context.Context, in *WorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroup_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) List(ctx context.Context, in *WorkspaceGroupSearchQuery, opts ...grpc.CallOption) (*WorkspaceGroupsInfo, error) {
	out := new(WorkspaceGroupsInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroup_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) Stat(ctx context.Context, in *WorkspaceGroupStatQuery, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, WorkspaceGroup_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupClient) ListAPIGResources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*APIResourcesList, error) {
	out := new(APIResourcesList)
	err := c.cc.Invoke(ctx, WorkspaceGroup_ListAPIGResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceGroupServer is the server API for WorkspaceGroup service.
// All implementations must embed UnimplementedWorkspaceGroupServer
// for forward compatibility
type WorkspaceGroupServer interface {
	Create(context.Context, *CreateWorkspaceGroupRequest) (*WorkspaceGroupInfo, error)
	Update(context.Context, *UpdateWorkspaceGroupRequest) (*WorkspaceGroupInfo, error)
	Delete(context.Context, *WorkspaceGroupRequest) (*emptypb.Empty, error)
	AddUsers(context.Context, *UsersWorkspaceGroupRequest) (*WorkspaceGroupInfo, error)
	RemoveUsers(context.Context, *UsersWorkspaceGroupRequest) (*WorkspaceGroupInfo, error)
	UpdateRole(context.Context, *WorkspaceGroupUpdateRoleRequest) (*WorkspaceGroupInfo, error)
	Get(context.Context, *WorkspaceGroupRequest) (*WorkspaceGroupInfo, error)
	List(context.Context, *WorkspaceGroupSearchQuery) (*WorkspaceGroupsInfo, error)
	Stat(context.Context, *WorkspaceGroupStatQuery) (*structpb.Struct, error)
	// API 리소스 목록을 반환하는 메서드 추가
	ListAPIGResources(context.Context, *emptypb.Empty) (*APIResourcesList, error)
	mustEmbedUnimplementedWorkspaceGroupServer()
}

// UnimplementedWorkspaceGroupServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceGroupServer struct {
}

func (UnimplementedWorkspaceGroupServer) Create(context.Context, *CreateWorkspaceGroupRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkspaceGroupServer) Update(context.Context, *UpdateWorkspaceGroupRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWorkspaceGroupServer) Delete(context.Context, *WorkspaceGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkspaceGroupServer) AddUsers(context.Context, *UsersWorkspaceGroupRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedWorkspaceGroupServer) RemoveUsers(context.Context, *UsersWorkspaceGroupRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsers not implemented")
}
func (UnimplementedWorkspaceGroupServer) UpdateRole(context.Context, *WorkspaceGroupUpdateRoleRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedWorkspaceGroupServer) Get(context.Context, *WorkspaceGroupRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkspaceGroupServer) List(context.Context, *WorkspaceGroupSearchQuery) (*WorkspaceGroupsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkspaceGroupServer) Stat(context.Context, *WorkspaceGroupStatQuery) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedWorkspaceGroupServer) ListAPIGResources(context.Context, *emptypb.Empty) (*APIResourcesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIGResources not implemented")
}
func (UnimplementedWorkspaceGroupServer) mustEmbedUnimplementedWorkspaceGroupServer() {}

// UnsafeWorkspaceGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceGroupServer will
// result in compilation errors.
type UnsafeWorkspaceGroupServer interface {
	mustEmbedUnimplementedWorkspaceGroupServer()
}

func RegisterWorkspaceGroupServer(s grpc.ServiceRegistrar, srv WorkspaceGroupServer) {
	s.RegisterService(&WorkspaceGroup_ServiceDesc, srv)
}

func _WorkspaceGroup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).Create(ctx, req.(*CreateWorkspaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).Update(ctx, req.(*UpdateWorkspaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).Delete(ctx, req.(*WorkspaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_AddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersWorkspaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).AddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_AddUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).AddUsers(ctx, req.(*UsersWorkspaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_RemoveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersWorkspaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).RemoveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_RemoveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).RemoveUsers(ctx, req.(*UsersWorkspaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).UpdateRole(ctx, req.(*WorkspaceGroupUpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).Get(ctx, req.(*WorkspaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).List(ctx, req.(*WorkspaceGroupSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).Stat(ctx, req.(*WorkspaceGroupStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroup_ListAPIGResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupServer).ListAPIGResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroup_ListAPIGResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupServer).ListAPIGResources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceGroup_ServiceDesc is the grpc.ServiceDesc for WorkspaceGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.identity.workspace_group.WorkspaceGroup",
	HandlerType: (*WorkspaceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _WorkspaceGroup_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _WorkspaceGroup_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _WorkspaceGroup_Delete_Handler,
		},
		{
			MethodName: "add_users",
			Handler:    _WorkspaceGroup_AddUsers_Handler,
		},
		{
			MethodName: "remove_users",
			Handler:    _WorkspaceGroup_RemoveUsers_Handler,
		},
		{
			MethodName: "update_role",
			Handler:    _WorkspaceGroup_UpdateRole_Handler,
		},
		{
			MethodName: "get",
			Handler:    _WorkspaceGroup_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _WorkspaceGroup_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _WorkspaceGroup_Stat_Handler,
		},
		{
			MethodName: "ListAPIGResources",
			Handler:    _WorkspaceGroup_ListAPIGResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/identity/workspace_group/workspace_group.proto",
}
